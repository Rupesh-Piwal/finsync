generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String // Hashed password
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  budgets       Budget[]
  expenses      Expense[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Budget {
  id         String    @id @default(uuid())
  name       String
  amount     Float
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  expenses   Expense[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  budgets   Budget[]
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Expense {
  id         String   @id @default(uuid())
  title      String // Title input field
  amount     Float // Expense amount
  date       DateTime // Date of expense
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  budget     Budget?  @relation(fields: [budgetId], references: [id]) // Optional assignment to budget
  budgetId   String? // Optional foreign key
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@index([date]) // For better query performance when filtering by date
}
